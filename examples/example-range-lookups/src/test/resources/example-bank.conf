kafka.bootstrap.servers = "???"

akka {
  loglevel = "DEBUG"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
}

affinity {

  node {
    gateway {
      class = io.amient.affinity.example.ExampleBank
      listeners = [
        {
          host = 127.0.0.1
          port = 0
        }
      ]
      stream {
        input-stream {
          class = io.amient.affinity.kafka.KafkaLogStorage
          kafka {
            topic = "input1"
            partitions = 3
            bootstrap.servers = ${kafka.bootstrap.servers}
            consumer.group.id = "input-transactions"
          }
        }
      }
    }
    container {
      default = [0, 1, 2]
    }
  }

  keyspace.default {
    class = io.amient.affinity.example.DefaultPartition
    num.partitions = 3
    state.transactions {
      memstore.class = io.amient.affinity.core.storage.rocksdb.MemStoreRocksDb
      storage {
        class = io.amient.affinity.kafka.KafkaLogStorage
        kafka {
          bootstrap.servers = ${kafka.bootstrap.servers}
          topic = "transactions"
        }
      }
    }
  }

  avro {
    schema.registry.class = io.amient.affinity.avro.MemorySchemaRegistry
  }

  coordinator {
    class = io.amient.affinity.core.cluster.CoordinatorZk
  }
}