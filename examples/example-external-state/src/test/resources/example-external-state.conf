affinity {

  system.name = "external-state-spec"

  //node-specific configs
  node {

    gateway {
      //this node will server as http gateway
      class = io.amient.affinity.example.ExampleESGateway
      listeners = [
        {
          host = 127.0.0.1
          port = 0
        }
      ]
    }

    container {
      //this node will also host a container with both of the partitions of the `external` keyspace
      external = [0, 1]
    }
  }

  //cluster-wide configs from here below ...

  keyspace.external {
    class = io.amient.affinity.example.ExampleESPartition
    partitions = 2
    state.news {
      external = true //<<< THIS IS IT - THE STATE BECOMES READONLY, EXPECTTED TO HAVA DATA GENERATED BY AN EXTERNAL SYSTEM
      memstore.class = io.amient.affinity.core.storage.MemStoreSimpleMap
      storage {
        class = io.amient.affinity.kafka.KafkaLogStorage
        kafka {
          bootstrap.servers = "???" // connection details will be provided by the SystemTestBase when EmbeddedKafka is launched
          topic = "ext1"
          consumer {}
          producer {}
        }
      }
    }
  }

  avro {
    //we could also use EmbeddedConfluentRegistry but this example is fully embedded in a single node so this will do
    schema.registry.class = io.amient.affinity.avro.MemorySchemaRegistry
    schema.registry.id = 349587
  }

  coordinator {
    //since we're running kafka we may as well test using a real coordinator, although EmbeddedCoordinator would work here too
    class = io.amient.affinity.core.cluster.CoordinatorZk
    zookeeper.connect = "???" // connection details will be provided by the SystemTestBase when EmbeddedKafka is launched
  }


}