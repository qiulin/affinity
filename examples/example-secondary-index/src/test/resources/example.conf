akka {
  loglevel = "DEBUG"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
}

affinity {

  system.name = "example-secondary-indicies"

  avro {
    schema.registry.class = io.amient.affinity.avro.MemorySchemaRegistry
  }

  coordinator {
    class = io.amient.affinity.core.cluster.CoordinatorZk
    zookeeper.connect = ${ZOOKEEPER_CONNECT}
  }

  node {
    data.dir = "./.data/example-sec-index"

    gateway {
      class = affinity.ESecondaryIndex
      listeners = [
        {
          host = 127.0.0.1
          port = 0
        }
      ]
      stream {
        input-stream {
          class = io.amient.affinity.kafka.KafkaLogStorage
          kafka {
            topic = "input1"
            partitions = 3
            bootstrap.servers = ${KAFKA_CONNECTION}
            consumer.group.id = ${affinity.system.name}
          }
        }
      }
    }
    container {
      articles = [0, 1, 2]
    }
  }

  keyspace.articles {
    class = affinity.ArticlesPartition
    partitions = 3
    state.articles {
      memstore.class = io.amient.affinity.core.storage.rocksdb.MemStoreRocksDb
      storage {
        class = io.amient.affinity.kafka.KafkaLogStorage
        kafka {
          bootstrap.servers = ${KAFKA_CONNECTION}
          topic = "articles"
        }
      }
    }
  }

}